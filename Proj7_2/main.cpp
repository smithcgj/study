#include<stdio.h>
#include<malloc.h>
#define MaxSize 100
typedef char ElemType;
typedef struct node
{
    ElemType data;//数据元素
    struct node *lchild;//指向左孩子
    struct node *rchild;//指向右孩子
}BTNode;
extern void CreateBTNode(BTNode*& b, char* str);
extern void DispBTNode(BTNode* b);
extern void DestroyBTNode(BTNode*& b);
void PreOrder(BTNode *b)//先序遍历的递归算法
{
    if(b!=NULL)
    {
        printf("%c",b->data);//访问根节点
        PreOrder(b->lchild);//递归访问左子树
        PreOrder(b->rchild);//递归访问右子树
    }
}
void PreOrder1(BTNode* b)//先序遍历的非递归算法
{
    BTNode *St[MaxSize],*p;
    int top=-1;
    if(b!=NULL)
    {
        top++;//根节点进栈
        St[top]=b;
        while(top>-1)//栈不为空时循环
        {
            p=St[top];//退栈并访问该节点
            top--;
            printf("%c",p->data);
            if(p->rchild!=NULL)//右孩子进栈
            {
                top++;
                St[top]=p->rchild;
            }
            if(p->lchild!=NULL)//左孩子进栈
            {
                top++;
                St[top]=p->lchild;
            }
        }
        printf("\n");
    }
}
void InOrder(BTNode *b)//中序遍历的递归算法
{
    if(b!=NULL)
    {
        InOrder(b->lchild);//递归访问左子树
        printf("%c",b->data);//访问根节点
        InOrder(b->rchild);//递归访问右子树
    }
}
void InOrder1(BTNode* b)//中序遍历的非递归算法
{
    BTNode * St[MaxSize],*p;
    int top=-1;
    if(b!=NULL)
    {
        p=b;
        while(top>-1||p!=NULL)
        {
            while(p!=NULL)//将*p节点及其左下节点进栈
            {
                top++;
                St[top]=p;
                p=p->lchild;
            }
            if(top>-1)
            {
                p=St[top];
                top--;
                printf("%c",p->data);//访问节点
                p=p->rchild;//p指向刚访问节点的右子树
            }
        }
        printf("\n");
    }
}
void PostOrder(BTNode *b)//后序遍历的递归算法
{
    if(b!=NULL)
    {
        PostOrder(b->lchild);//递归访问左子树
        PostOrder(b->rchild);//递归访问右子树
        printf("%c",b->data);//访问根节点
    }
}
void PostOrder1(BTNode* b)
{
    BTNode *St[MaxSize];
    BTNode *p;
    int flag,top=-1;
    if(b!=NULL)
    {
        do
        {
            while(b!=NULL)//将b所有左节点进栈
            {
                top++;
                St[top]=b;
                b=b->lchild;
            }
            p=NULL;//p指向当前节点的前一个已访问的节点
            flag=1;
            while(top!=-1&&flag)
            {
                b=St[top];//取出当前的栈顶元素
                if(b->rchild==p)//右子树不存在或已被访问，访问之
                {
                    printf("%c",b->data);//访问*b节点
                    top--;
                    p=b;//p指向将被访问的节点
                }
                else
                {
                    b=b->rchild;//让b指向右子树
                    flag=0;
                }
            }
        }while(top!=-1);
        printf("\n");
    }
}
void TravLevel(BTNode *b)
{
    BTNode *Qu[MaxSize];//定义循环队列
    int front,rear;//定义队首队尾指针
    front=rear=0;//置空列为空列
    if(b!=NULL)
        printf("%c",b->data);
    rear++;//节点指针进入队列
    Qu[rear]=b;
    while(rear!=front)//队列不为空
    {
        front=(front+1)%MaxSize;
        b=Qu[front];//队头出队列
        if(b->lchild!=NULL)//输出左孩子,并入队列
        {
            printf("%c",b->lchild->data);
            rear=(rear+1)%MaxSize;
            Qu[rear]=b->lchild;
        }
        if(b->rchild!=NULL)//输出右孩子,并入队列
        {
            printf("%c",b->rchild->data);
            rear=(rear+1)%MaxSize;
            Qu[rear]=b->rchild;
        }
    }
    printf("\n");
}
int main()
{
    BTNode *b;
    CreateBTNode(b,"A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))");
    printf("二叉树b:");DispBTNode(b);printf("\n");
    printf("层次遍历序列:");
    TravLevel(b);
    printf("先序遍历序列:\n");
    printf("    递归算法:");PreOrder(b);printf("\n");
    printf("  非递归算法:");PreOrder1(b);
    printf("中序遍历序列:\n");
    printf("    递归算法:");InOrder(b);printf("\n");
    printf("  非递归算法:");InOrder1(b);
    printf("后序遍历序列:\n");
    printf("    递归算法:");PostOrder(b);printf("\n");
    printf("  非递归算法:");PostOrder1(b);
    DestroyBTNode(b);
    return 0;
}
